// Generated by CoffeeScript 1.10.0

/*
 * Module dependencies
 */

(function() {
  var Logger, downloader, fs, https, progress, request, targz;

  request = require('request');

  progress = require('request-progress');

  https = require('follow-redirects').https;

  targz = require('tar.gz');

  Logger = require('./logger').Logger;

  fs = require('fs');

  require('colours');

  downloader = module.exports = {};


  /*
   * Downloader
   * @param url {String} url to GET
   * @param save {String} Save file
   * @param options {Object} Options
   * @param callback {Function} Callback
   */

  downloader.get = function(url, save, options, callback) {
    var file_stream, log, logger;
    log = require('single-line-log').stdout;
    logger = new Logger('retis', options);
    file_stream = fs.createWriteStream(save);
    log("[retis INFO]".green + " Downloading " + url + "...0% at 0 kb/sec...\n");
    progress(request(url)).on('progress', function(state) {
      var percent;
      percent = (Math.floor(state.percentage * 100)) + "% [" + (Math.round(state.size.transferred / 1024)) + " kb of " + (Math.round(state.size.total / 1024)) + " kb]";
      return log("[retis INFO]".green + " Downloading " + url + "..." + percent + " at " + (Math.round(state.speed / 1024)) + " kb/sec...\n");
    }).on('data', function(d) {
      file_stream.write(d);
    }).on('error', function(e) {
      callback(e);
    }).on('end', function() {
      logger.info("Downloaded " + url + ".");
      return callback();
    });

    /*
    #log('0% [0kb of 0kb]\n')
    @req = https.request(options, (res) ->
      logger.deb 'statusCode: '+res.statusCode
      logger.deb 'headers: \n'+JSON.stringify(res.headers, null, '\t')
      res.on('end', () ->
        logger.info("Downloaded #{url}.")
        #path: "#{retis_plugin_dir}/.tmp/test"
        callback()
      )
      res.on 'data', (d) ->
        file_stream.write d
        return
      )
    
    @req.end()
    @req.on 'error', (e) ->
      callback(e)
      return
     */
  };

}).call(this);
