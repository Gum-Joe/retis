// Generated by CoffeeScript 1.10.0

/*
 * Module dependencies
 */
var RunScript, fs, mkdirp, os, script, spawn, spawnSync, validateOS;

mkdirp = require('mkdirp');

fs = require('fs');

os = require('os');

validateOS = require('../os').validateOS;

spawnSync = require('child_process').spawnSync;

spawn = require('child_process').spawn;


/*
 * Vars
 */

script = module.exports = {};


/*
 * Class
 * @param logger {Logger} Logger
 * @param options {Object} Options
 * @param config {Object} CSON/JSON/YAML parsed config
 * @param callback {Function} Callback
 */

RunScript = (function() {
  function RunScript(logger, options, config, callback) {
    this.config = config;
    this.logger = logger;
    this.options = options;
    if (!(os.platform() !== 'win32' || 'darwin') || (options.hasOwnProperty('os') && typeof options.os !== 'undefined' && options.os !== 'Windows' && options.os !== 'OSX') || (config.hasOwnProperty('os') && config.os !== 'Windows' && config.os !== 'OSX')) {
      this.os = "Linux";
    }
    if (!(os.platform() !== 'win32' || 'linux') || (options.hasOwnProperty('os') && typeof options.os !== 'undefined' && options.os !== 'Windows' && options.os !== 'Linux') || (config.hasOwnProperty('os') && config.os !== 'Windows' && config.os !== 'Linux')) {
      this.os = "OSX";
    }
    if (!(os.platform() !== 'darwin' || 'linux') || (options.hasOwnProperty('os') && typeof options.os !== 'undefined' && options.os !== 'OSX' && options.os !== 'Linux') || (config.hasOwnProperty('os') && config.os !== 'OSX' && config.os !== 'Linux')) {
      this.os = "Windows";
    }
    validateOS(this.os, this.logger);
    if (this.os !== 'Windows') {
      this.sh_header = '#!/bin/bash\n';
    }
    if (this.os === 'Windows') {
      this.sh_header = '@echo off\nREM Windows file to run builds\n@echo on\n';
    }
    if (this.os !== 'Windows') {
      this.sh_suffix = '.sh';
    }
    if (this.os === 'Windows') {
      this.sh_suffix = '.cmd';
    }
    if (config.hasOwnProperty("sh")) {
      this.sh_config = config.sh;
    }
    if (!config.hasOwnProperty("sh")) {
      this.sh_config = {};
    }
    this.build_output = "./build";
    if (config.hasOwnProperty('out_dir')) {
      this.build_output = config.out_dir;
    }
    if (options.hasOwnProperty('outDir' && typeof options.outDir !== 'undefined')) {
      this.build_output = options.outDir;
    }
    this.run_script = this.build_output + "/build" + this.sh_suffix;
    this.run_key = "[RUN]".green.bold;
    this.logger.deb("Build output directory: " + this.build_output.cyan.bold);
    if (!fs.existsSync(this.build_output)) {
      this.logger.deb("Creating output directory " + this.build_output.cyan.bold + "...");
      mkdirp(this.build_output);
      this.logger.deb("Created output directory " + this.build_output.cyan.bold + ".");
    }
    this.logger.deb("Creating run script " + this.run_script.cyan.bold + "...");
    this.file = fs.createWriteStream(this.run_script, {
      flags: 'w+',
      defaultEncoding: 'utf8'
    });
    this.file.write(this.sh_header);
    this.logger.deb("New run script created.");
    return;
  }


  /*
   * Add ENVs
   */

  RunScript.prototype.applyEnv = function() {
    this.logger.deb("Applying ENV to run script...");
    if (this.sh_config.hasOwnProperty("hide_env") && this.sh_config.hide_env === false || !(this.sh_config.hasOwnProperty("hide_env"))) {
      this.echo("Setting environment variables...".green.bold);
    } else {
      this.logger.deb("Exportion hidden by user.");
    }
    this.addEnv("RETIS_LANGUAGE", this.config.language);
    this.addEnv("RETIS_OS", this.os);
    this.addEnv("RETIS_PROJECT_NAME", this.options.name);
    if (this.config.hasOwnProperty('scm')) {
      if (!this.config.scm.hasOwnProperty("type")) {
        throw new Error("No type of scm specified!");
      }
      if (this.config.scm.type !== 'git') {
        throw new Error("Scm \'" + this.config.scm.type + "\' is not supported!");
      }
      if (this.config.scm.hasOwnProperty('user') && this.config.scm.user.hasOwnProperty('name')) {
        this.addEnv("RETIS_GIT_USER", this.config.scm.user.name);
      }
      if (!this.config.scm.hasOwnProperty('user') || !this.config.scm.user.hasOwnProperty('name')) {
        this.addEnv("RETIS_GIT_USER", this._git(['config', 'user.name']));
      }
      this.addEnv("RETIS_GIT_COMMIT", this._git(['rev-parse', 'HEAD']));
      this.addEnv("RETIS_GIT_BRANCH", this._git(['rev-parse', '--abbrev-ref', 'HEAD']));
      this.addEnv("RETIS_GIT_REMOTE", this._git('config --get remote.origin.url'.split(" ")));
    }
    this.echo("");
    this.logger.deb("Applied ENV to run script.");
  };


  /*
   * Add User ENVs
   */

  RunScript.prototype.applyUserEnv = function() {
    var env, env_split, i, len, ref, results;
    if (this.config.hasOwnProperty("env")) {
      this.logger.deb("Adding user env to script...");
      if (this.sh_config.hasOwnProperty("hide_env") && this.sh_config.hide_env === false || !(this.sh_config.hasOwnProperty("hide_env"))) {
        this.echo("Settting environment variables from project specification file...".green.bold);
      }
      ref = this.config.env;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        env = ref[i];
        if (!env.includes("=")) {
          this.logger.err("ENV value " + ("\'" + env + "\'").cyan.bold + " not in the form of " + "NAME=VALUE".green.bold + "!");
          throw new Error("ENV value \'" + env + "\' not in the form of \'NAME=VALUE\'!");
        }
        env_split = env.split("=");
        results.push(this.addEnv(env_split[0], env_split[1]));
      }
      return results;
    }
  };


  /*
   * Add single ENV
   * @param env {String} Variable to set
   * @param value {String} Value
   */

  RunScript.prototype.addEnv = function(env, value) {
    this.logger.deb("Adding environmet variable " + env.magenta.bold + "...");
    if (this.os !== 'Windows') {
      this.export_key_word = 'export';
    }
    if (this.os === 'Windows') {
      this.export_key_word = 'set';
    }
    if (this.sh_config.hasOwnProperty("hide_env") && this.sh_config.hide_env === false || !(this.sh_config.hasOwnProperty("hide_env"))) {
      this.echo(this.export_key_word.magenta.bold + " " + env);
    }
    return this.write(this.export_key_word + " " + env + "=\"" + value + "\"");
  };


  /*
   * ECHO command
   * @param str {String} String to echo
   */

  RunScript.prototype.echo = function(str) {
    return this.write("echo " + str);
  };


  /*
   * Add command
   * @param cmd {String} Command
   */

  RunScript.prototype.add = function(cmd) {
    this.error_check = cmd + " || {\n\techo " + ("Command \"" + cmd + "\" exited with $?").bold + "\n\texit $?\n}";
    this.logger.deb("Adding command " + ("\'" + cmd + "\'").cyan.bold + "...");
    if (this.sh_config.hasOwnProperty("hide_env") && this.sh_config.hide_env === false || !(this.sh_config.hasOwnProperty("hide_env"))) {
      this.echo(this.run_key + " " + cmd);
    }
    return this.write("" + this.error_check);
  };


  /*
   * Run script
   */

  RunScript.prototype.runScript = function() {
    var _logger;
    this.logger.deb("Running script " + this.run_script + "...");
    _logger = this.logger;
    if (this.os !== 'Windows') {
      this.logger.deb("Running the bash script...");
      this.output = spawn('bash', [this.run_script]);
    } else {
      this.logger.deb("Running the cmd script...");
      this.output = spawn('cmd', [this.run_script]);
    }
    this.output.stdout.on('data', function(data) {
      console.log(data.toString('utf8'));
    });
    this.output.stderr.on('data', function(data) {
      console.log(data.toString('utf8'));
    });
    this.output.on('exit', function(code) {
      _logger.deb("Script exited with " + code);
      if (code !== 0) {
        _logger.err("Script exited with " + code.yellow.bold + "!");
        throw new Error("Script exited with " + code + "!");
      }
    });
  };


  /*
   * Write to script
   * @param data {String} String to write
   */

  RunScript.prototype.write = function(data) {
    return this.file.write(data + "\n");
  };


  /*
   * Get git output data
   * @private
   * @param args {Array} git args
   */

  RunScript.prototype._git = function(args) {
    return spawnSync('git', args).stdout.toString('utf8').slice(0, -1);
  };

  return RunScript;

})();

script.RunScript = RunScript;
