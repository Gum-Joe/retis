// Generated by CoffeeScript 1.10.0

/*
 * Module dependencies
 */
var Installer, installer, spawnSync;

spawnSync = require('child_process').spawnSync;


/*
 * Vars
 */

installer = module.exports = {};

Installer = (function() {
  function Installer() {}


  /*
   * Exec method
   * @param command {String} Command to run
   * @param args {Array} Args
   * @param onStdout {Function} Runs when we get stdout
   * @param onStderr {Function} Runs when we get stderr
   */

  Installer.prototype.exec = function(command, args, onStdout, onStderr) {
    var i, j, k, len, len1, len2, o, oe, ref, ref1, ref2;
    this.process = spawnSync(command, args);
    this.logger.deb("PID: " + this.process.pid);
    this.stdout = this.process.stdout.toString('utf8').split('\n');
    this.stderr = this.process.stderr.toString('utf8').split('\n');
    ref = this.stdout;
    for (i = 0, len = ref.length; i < len; i++) {
      o = ref[i];
      if (this.options.hasOwnProperty("hideOutput") === false || this.options.hasOwnProperty("hideOutput") && !this.options.hideOutput) {
        onStdout(o);
      } else {
        this.logger.deb("STDOUT for command " + ("\'" + command + "\'").green + " hidden.");
      }
    }
    ref1 = this.stderr;
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      oe = ref1[j];
      if (this.options.hasOwnProperty("hideOutput") === false || this.options.hasOwnProperty("hideOutput") && !this.options.hideOutput) {
        onStderr(o);
      } else {
        this.logger.deb("STDERR for command " + ("\'" + command + "\'").green + " hidden.");
      }
    }
    if (this.process.error) {
      throw this.process.error;
    }
    if (this.process.status !== 0) {
      this.logger.err("Command " + ("\'" + command + "\'").green + " exited with " + (this.process.status.toString().yellow) + "!");
      this.logger.err("Stderr:");
      console.log("");
      ref2 = this.stderr;
      for (k = 0, len2 = ref2.length; k < len2; k++) {
        oe = ref2[k];
        this.logger.stderr(oe);
      }
      return process.exit(1);
    }
  };

  return Installer;

})();

installer.Installer = Installer;
