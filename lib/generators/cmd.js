// Generated by CoffeeScript 1.10.0

/*
 * Module dependencies
 */
var Command, gen, which;

which = require('../which');


/*
 * Vars
 */

gen = module.exports = {};


/*
 * Gen cmd
 * @param config {Object} config
 * @param defaults {Object} Defaults for cmd
 * @param logger {Logger} Logger
 */

Command = (function() {
  function Command(config, defaults, logger) {
    this.config = config;
    this.logger = logger;
    this.defaults = defaults;
  }


  /*
   * Generate
   * @param property {String} Property to find in config
   */

  Command.prototype.generate = function(property) {
    var tmp_ret;
    if (this.config.hasOwnProperty(property)) {
      tmp_ret = this.config[property].split(' ')[0];
    }
    if (!this.config.hasOwnProperty(property) && this.defaults.hasOwnProperty(property)) {
      tmp_ret = this.defaults[property].cmd;
    }
    if (typeof tmp_ret !== 'undefined') {
      return which(tmp_ret);
    }
    if (typeof tmp_ret === 'undefined') {
      return null;
    }
  };


  /*
   * Get args
   * @param property {String} Property to find in config
   */

  Command.prototype.args = function(property) {
    var arg, i, len, new_build_args, tmp_build_args;
    if (this.config.hasOwnProperty(property)) {
      tmp_build_args = this.config[property].split(' ');
    }
    if (this.config.hasOwnProperty(property)) {
      new_build_args = [];
      for (i = 0, len = tmp_build_args.length; i < len; i++) {
        arg = tmp_build_args[i];
        if (arg !== tmp_build_args[0]) {
          new_build_args.push(arg);
        }
        if (arg === tmp_build_args[tmp_build_args.length - 1]) {
          tmp_build_args = new_build_args;
        }
      }
    }
    if (!this.config.hasOwnProperty(property) && this.defaults.hasOwnProperty(property)) {
      tmp_build_args = this.defaults.build.args;
    }
    if (typeof tmp_build_args !== 'undefined') {
      return tmp_build_args;
    }
    if (typeof tmp_build_args === 'undefined') {
      return null;
    }
  };

  return Command;

})();

module.exports = Command;
